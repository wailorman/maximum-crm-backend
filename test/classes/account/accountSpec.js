// Generated by CoffeeScript 1.8.0
(function() {
  var Account, AccountGroup, AccountGroupModel, AccountModel, async, cleanUpAccountGroups, cleanUpAccounts, cleanUpDb, createTheNewAccountGroup, mf, mongoose, passwordHash, should, theNewAccount, theNewAccountGroup;

  should = require('should');

  mongoose = require('mongoose');

  async = require('async');

  passwordHash = require('password-hash');

  mf = require('../../../libs/mini-funcs.js');

  Account = require('../../../classes/account/account.js');

  AccountModel = require('../../../classes/account/account-model.js');

  AccountGroup = require('../../../classes/account-group/account-group.js');

  AccountGroupModel = require('../../../classes/account-group/account-group-model.js');

  theNewAccount = theNewAccountGroup = null;

  cleanUpAccounts = function(next) {
    return AccountModel.find().remove().exec(function(err) {
      if (err) {
        next(err);
      }
      return next();
    });
  };

  cleanUpAccountGroups = function(next) {
    return AccountGroupModel.find().remove().exec(function(err) {
      if (err) {
        next(err);
      }
      return next();
    });
  };

  createTheNewAccountGroup = function(next) {
    theNewAccountGroup = new AccountGroup();
    return theNewAccountGroup.create({
      name: 'some-group',
      perms: {
        hall: {
          create: true
        }
      }
    }, function(err, newGroup) {
      if (err) {
        next(err);
      }
      theNewAccount = newGroup;
      return next();
    });
  };

  cleanUpDb = function(next) {
    return async.series([
      function(scb) {
        return cleanUpAccounts(scb);
      }, function(scb) {
        return cleanUpAccountGroups(scb);
      }, function(scb) {
        return createTheNewAccountGroup(scb);
      }
    ], function(err) {
      if (err) {
        return next(err);
      }
    });
  };

  describe('Account class testing', function() {
    before(function(done) {
      return mongoose.connect('mongodb://localhost/test', null, function(err) {
        should.not.exist(err);
        return cleanUpDb(function(err) {
          should.not.exist(err);
          return done();
        });
      });
    });
    return describe('.create', function() {
      it('should create Account', function(done) {
        async.eachSeries([
          {
            name: 'some-name',
            password: '1234',
            group: theNewAccountGroup,
            individualPerms: {}
          }, {
            name: 'some-name2',
            password: '1234',
            individualPerms: {}
          }, {
            name: 'some-name',
            password: '1234',
            group: theNewAccountGroup
          }
        ], function(validData, escb) {});
        return theNewAccount = Account.create({
          name: 'some-name',
          password: '1234',
          group: theNewAccountGroup,
          individualPerms: {}
        }, function(err) {
          should.not.exist(err);
          return done();
        });
      });
      return it('should not create Account with invalid params', function(done) {
        return theNewAccount = Account.create({
          name: 'some-name',
          password: '1234',
          group: theNewAccountGroup,
          individualPerms: {}
        }, function(err) {
          should.not.exist(err);
          return done();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=accountSpec.js.map
